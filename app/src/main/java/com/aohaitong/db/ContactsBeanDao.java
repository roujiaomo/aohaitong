package com.aohaitong.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.aohaitong.bean.ContactsBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "CONTACTS_BEAN".
 */
public class ContactsBeanDao extends AbstractDao<ContactsBean, String> {

    public static final String TABLENAME = "CONTACTS_BEAN";

    /**
     * Properties of entity ContactsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Telephone = new Property(1, String.class, "telephone", true, "TELEPHONE");
    }


    public ContactsBeanDao(DaoConfig config) {
        super(config);
    }

    public ContactsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACTS_BEAN\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"TELEPHONE\" TEXT PRIMARY KEY NOT NULL );"); // 1: telephone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACTS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactsBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(2, telephone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactsBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }

        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(2, telephone);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }

    @Override
    public ContactsBean readEntity(Cursor cursor, int offset) {
        ContactsBean entity = new ContactsBean( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // telephone
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ContactsBean entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTelephone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    }

    @Override
    protected final String updateKeyAfterInsert(ContactsBean entity, long rowId) {
        return entity.getTelephone();
    }

    @Override
    public String getKey(ContactsBean entity) {
        if (entity != null) {
            return entity.getTelephone();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactsBean entity) {
        return entity.getTelephone() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
