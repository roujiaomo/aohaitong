package com.aohaitong.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.aohaitong.bean.GroupBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GROUP_BEAN".
 */
public class GroupBeanDao extends AbstractDao<GroupBean, Long> {

    public static final String TABLENAME = "GROUP_BEAN";

    /**
     * Properties of entity GroupBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GroupId = new Property(1, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupName = new Property(2, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupMemberTel = new Property(3, String.class, "groupMemberTel", false, "GROUP_MEMBER_TEL");
        public final static Property GroupManagerTel = new Property(4, String.class, "groupManagerTel", false, "GROUP_MANAGER_TEL");
    }


    public GroupBeanDao(DaoConfig config) {
        super(config);
    }

    public GroupBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUP_ID\" TEXT," + // 1: groupId
                "\"GROUP_NAME\" TEXT," + // 2: groupName
                "\"GROUP_MEMBER_TEL\" TEXT," + // 3: groupMemberTel
                "\"GROUP_MANAGER_TEL\" TEXT);"); // 4: groupManagerTel
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(2, groupId);
        }

        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }

        String groupMemberTel = entity.getGroupMemberTel();
        if (groupMemberTel != null) {
            stmt.bindString(4, groupMemberTel);
        }

        String groupManagerTel = entity.getGroupManagerTel();
        if (groupManagerTel != null) {
            stmt.bindString(5, groupManagerTel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(2, groupId);
        }

        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(3, groupName);
        }

        String groupMemberTel = entity.getGroupMemberTel();
        if (groupMemberTel != null) {
            stmt.bindString(4, groupMemberTel);
        }

        String groupManagerTel = entity.getGroupManagerTel();
        if (groupManagerTel != null) {
            stmt.bindString(5, groupManagerTel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public GroupBean readEntity(Cursor cursor, int offset) {
        GroupBean entity = new GroupBean( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupMemberTel
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // groupManagerTel
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, GroupBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupMemberTel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupManagerTel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    @Override
    protected final Long updateKeyAfterInsert(GroupBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(GroupBean entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
