package com.aohaitong.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.aohaitong.bean.BroadBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BROAD_BEAN".
 */
public class BroadBeanDao extends AbstractDao<BroadBean, Long> {

    public static final String TABLENAME = "BROAD_BEAN";

    /**
     * Properties of entity BroadBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property BusinessType = new Property(2, int.class, "businessType", false, "BUSINESS_TYPE");
        public final static Property ReceiveTime = new Property(3, long.class, "receiveTime", false, "RECEIVE_TIME");
    }


    public BroadBeanDao(DaoConfig config) {
        super(config);
    }

    public BroadBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"BROAD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONTENT\" TEXT," + // 1: content
                "\"BUSINESS_TYPE\" INTEGER NOT NULL ," + // 2: businessType
                "\"RECEIVE_TIME\" INTEGER NOT NULL );"); // 3: receiveTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BROAD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BroadBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
        stmt.bindLong(3, entity.getBusinessType());
        stmt.bindLong(4, entity.getReceiveTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BroadBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
        stmt.bindLong(3, entity.getBusinessType());
        stmt.bindLong(4, entity.getReceiveTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public BroadBean readEntity(Cursor cursor, int offset) {
        BroadBean entity = new BroadBean( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
                cursor.getInt(offset + 2), // businessType
                cursor.getLong(offset + 3) // receiveTime
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, BroadBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBusinessType(cursor.getInt(offset + 2));
        entity.setReceiveTime(cursor.getLong(offset + 3));
    }

    @Override
    protected final Long updateKeyAfterInsert(BroadBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(BroadBean entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BroadBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
