package com.aohaitong.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.aohaitong.bean.FriendApplyBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FRIEND_APPLY_BEAN".
 */
public class FriendApplyBeanDao extends AbstractDao<FriendApplyBean, String> {

    public static final String TABLENAME = "FRIEND_APPLY_BEAN";

    /**
     * Properties of entity FriendApplyBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Telephone = new Property(3, String.class, "telephone", true, "TELEPHONE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
        public final static Property NowLoginTel = new Property(6, String.class, "nowLoginTel", false, "NOW_LOGIN_TEL");
        public final static Property SendType = new Property(7, int.class, "sendType", false, "SEND_TYPE");
        public final static Property Status = new Property(8, int.class, "status", false, "STATUS");
    }


    public FriendApplyBeanDao(DaoConfig config) {
        super(config);
    }

    public FriendApplyBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_APPLY_BEAN\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"TELEPHONE\" TEXT PRIMARY KEY NOT NULL ," + // 3: telephone
                "\"TIME\" TEXT," + // 4: time
                "\"TYPE\" INTEGER NOT NULL ," + // 5: type
                "\"NOW_LOGIN_TEL\" TEXT," + // 6: nowLoginTel
                "\"SEND_TYPE\" INTEGER NOT NULL ," + // 7: sendType
                "\"STATUS\" INTEGER NOT NULL );"); // 8: status
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_APPLY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendApplyBean entity) {
        stmt.clearBindings();

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }

        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }

        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(4, telephone);
        }

        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getType());

        String nowLoginTel = entity.getNowLoginTel();
        if (nowLoginTel != null) {
            stmt.bindString(7, nowLoginTel);
        }
        stmt.bindLong(8, entity.getSendType());
        stmt.bindLong(9, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendApplyBean entity) {
        stmt.clearBindings();

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }

        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }

        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(4, telephone);
        }

        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getType());

        String nowLoginTel = entity.getNowLoginTel();
        if (nowLoginTel != null) {
            stmt.bindString(7, nowLoginTel);
        }
        stmt.bindLong(8, entity.getSendType());
        stmt.bindLong(9, entity.getStatus());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }

    @Override
    public FriendApplyBean readEntity(Cursor cursor, int offset) {
        FriendApplyBean entity = new FriendApplyBean( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // telephone
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
                cursor.getInt(offset + 5), // type
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nowLoginTel
                cursor.getInt(offset + 7), // sendType
                cursor.getInt(offset + 8) // status
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, FriendApplyBean entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTelephone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setNowLoginTel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSendType(cursor.getInt(offset + 7));
        entity.setStatus(cursor.getInt(offset + 8));
    }

    @Override
    protected final String updateKeyAfterInsert(FriendApplyBean entity, long rowId) {
        return entity.getTelephone();
    }

    @Override
    public String getKey(FriendApplyBean entity) {
        if (entity != null) {
            return entity.getTelephone();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendApplyBean entity) {
        return entity.getTelephone() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
