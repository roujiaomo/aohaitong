package com.aohaitong.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.aohaitong.bean.ChatMsgBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "CHAT_MSG_BEAN".
 */
public class ChatMsgBeanDao extends AbstractDao<ChatMsgBean, Long> {

    public static final String TABLENAME = "CHAT_MSG_BEAN";

    /**
     * Properties of entity ChatMsgBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Msg = new Property(1, String.class, "msg", false, "MSG");
        public final static Property Telephone = new Property(2, String.class, "telephone", false, "TELEPHONE");
        public final static Property NowLoginTel = new Property(3, String.class, "nowLoginTel", false, "NOW_LOGIN_TEL");
        public final static Property SendType = new Property(4, int.class, "sendType", false, "SEND_TYPE");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property InsertTime = new Property(6, java.util.Date.class, "insertTime", false, "INSERT_TIME");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
        public final static Property MessageType = new Property(8, int.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property FilePath = new Property(9, String.class, "filePath", false, "FILE_PATH");
        public final static Property RecordTime = new Property(10, int.class, "recordTime", false, "RECORD_TIME");
        public final static Property IsGroup = new Property(11, boolean.class, "isGroup", false, "IS_GROUP");
        public final static Property GroupId = new Property(12, String.class, "groupId", false, "GROUP_ID");
    }


    public ChatMsgBeanDao(DaoConfig config) {
        super(config);
    }

    public ChatMsgBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MSG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MSG\" TEXT," + // 1: msg
                "\"TELEPHONE\" TEXT," + // 2: telephone
                "\"NOW_LOGIN_TEL\" TEXT," + // 3: nowLoginTel
                "\"SEND_TYPE\" INTEGER NOT NULL ," + // 4: sendType
                "\"TIME\" TEXT," + // 5: time
                "\"INSERT_TIME\" INTEGER," + // 6: insertTime
                "\"STATUS\" INTEGER NOT NULL ," + // 7: status
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 8: messageType
                "\"FILE_PATH\" TEXT," + // 9: filePath
                "\"RECORD_TIME\" INTEGER NOT NULL ," + // 10: recordTime
                "\"IS_GROUP\" INTEGER NOT NULL ," + // 11: isGroup
                "\"GROUP_ID\" TEXT);"); // 12: groupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MSG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(2, msg);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(3, telephone);
        }
 
        String nowLoginTel = entity.getNowLoginTel();
        if (nowLoginTel != null) {
            stmt.bindString(4, nowLoginTel);
        }
        stmt.bindLong(5, entity.getSendType());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        java.util.Date insertTime = entity.getInsertTime();
        if (insertTime != null) {
            stmt.bindLong(7, insertTime.getTime());
        }
        stmt.bindLong(8, entity.getStatus());
        stmt.bindLong(9, entity.getMessageType());

        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(10, filePath);
        }
        stmt.bindLong(11, entity.getRecordTime());
        stmt.bindLong(12, entity.getIsGroup() ? 1L : 0L);

        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(13, groupId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMsgBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(2, msg);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(3, telephone);
        }
 
        String nowLoginTel = entity.getNowLoginTel();
        if (nowLoginTel != null) {
            stmt.bindString(4, nowLoginTel);
        }
        stmt.bindLong(5, entity.getSendType());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        java.util.Date insertTime = entity.getInsertTime();
        if (insertTime != null) {
            stmt.bindLong(7, insertTime.getTime());
        }
        stmt.bindLong(8, entity.getStatus());
        stmt.bindLong(9, entity.getMessageType());

        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(10, filePath);
        }
        stmt.bindLong(11, entity.getRecordTime());
        stmt.bindLong(12, entity.getIsGroup() ? 1L : 0L);

        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(13, groupId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public ChatMsgBean readEntity(Cursor cursor, int offset) {
        ChatMsgBean entity = new ChatMsgBean( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msg
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // telephone
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nowLoginTel
                cursor.getInt(offset + 4), // sendType
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
                cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // insertTime
                cursor.getInt(offset + 7), // status
                cursor.getInt(offset + 8), // messageType
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // filePath
                cursor.getInt(offset + 10), // recordTime
                cursor.getShort(offset + 11) != 0, // isGroup
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // groupId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMsgBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTelephone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNowLoginTel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendType(cursor.getInt(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInsertTime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setMessageType(cursor.getInt(offset + 8));
        entity.setFilePath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRecordTime(cursor.getInt(offset + 10));
        entity.setIsGroup(cursor.getShort(offset + 11) != 0);
        entity.setGroupId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
    }

    @Override
    protected final Long updateKeyAfterInsert(ChatMsgBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(ChatMsgBean entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMsgBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
